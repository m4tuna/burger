// burger
// _mixins.scss

// setLayout
@mixin setLayout($type) {
	@if $type == null {
		.container {
			display:flex;
			flex-direction:row;
		}
		.content {
			width:100%;
			margin-left:0;
		}
	}
	@if $type == 'single' {
		.content {
			width:100%;
			margin-left:0;
		}
	}
	@if $type == 'double' {
		.container {
			display:flex;
			flex-direction:row;
		}
		.sidebar {
			&.sidebar-left {
				float:left;
			}
			&.sidebar-right {
				float:right;
			}
		}
	}
	@if $type == 'triple' {
		.content {
			width:50%;
			float:left;
		}
		.sidebar {
			width:25%;
			&.sidebar-left {
				float:left;
			}
			&.sidebar-right {
				float:right;
			}
		}
	}
	@if $responsive-sidebar {
	  @include breakpoint(md-only) {
	    .content, .sidebar, .sidebar-right, .sidebar-left {
	      width:100%;
	      float:left;
	    }
	  }
	}

}


// Fadein
@keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}

@mixin fadeIn($delay){
	animation: fadein $delay;
}

// Flex Center
// Flex-center option
// $set-flex: flex, inline-flex
// $direction: column, row etc
@mixin flex-center($set-flex, $direction) {
	display:$set-flex;
	flex-direction:$direction;
	align-items: center;
	align-content: center;
	justify-content: center;
}


/// Shorthand for placeholder text.
@mixin placeholder($placeholder-color, $placeholder-font) {
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $placeholder-color;
    font-family: $placeholder-font;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    color: $placeholder-color;
    font-family: $placeholder-font;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    color: $placeholder-color;
    font-family: $placeholder-font;
  }
  &:-moz-placeholder { /* Firefox 18- */
    color: $placeholder-color;
    font-family: $placeholder-font;
  }
}

/// Fluidly scale properties based on viewport units
/// @param {String} $property - These are the only mandatory arguments. Property can be any css property that accepts calc(), viewport units and pixels, ie. Most propertiesâ€¦ height/width/padding/font-size etc.
/// @param {Number} $min - Minimum value of the property
/// @param {Number} $max - Max value of the property
/// @param {Number} $start [320] - Beginning breakpoint
/// @param {Number} $end [1400] - Ending breakpoint
/// @param {Boolean} $clip [true] - By default, the mixin will prevent the value from decreasing or increasing past the $start or $end. To disable this, either pass $clip: false to disable both directions.
/// @param {Boolean} $clipAtStart [true] - To disable clipping past $start breakpoint set to false.
/// @param {Boolean} $clipAtEnd [true] - To disable clipping past $end breakpoint set to false.
/// @link http://www.adrenalinmedia.com.au/the-agency/insights/this-changes-everything-css-fluid-properties.aspx
/// @example
/// // 50px at 320 fluidly scaling up to 100px at 1920
/// h1 {
  /// @include fp(font-size, 50, 100)
/// }

@mixin fp($property, $min, $max, $start: 320, $end: 1400, $clip: true, $clipAtStart: true, $clipAtEnd: true) {
  $multiplier: ($max - $min) / ($end - $start) * 100;
  $adder: ($min * $end - $max * $start) / ($end - $start);
  $formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});
  @if $clip and $clipAtStart {
    @media (max-width: #{$start + 0px}) {
      #{$property}: $min + 0px;
    }
  }
  @if $clip and $clipAtEnd {
    @media (min-width: #{$end + 0px}) {
      #{$property}: $max + 0px;
    }
  }
  #{$property}: $formula;
}



/// Shorthand for positioning.
/// @param {String} $type - Position type (either absolute, fixed or relative)
/// @param {Length} $top     [null] - Top offset
/// @param {Length} $right   [null] - Right offset
/// @param {Length} $bottom  [null] - Bottom offset
/// @param {Length} $left    [null] - Left offset
/// @example @include position(fixed, $top: 0, $left: 0);
@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
    position: $type;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

/// Sets the width and height.
/// @param {Value} $width - Value for width
/// @param {Value} $height [$width] - Value for height
/// @example @include size(100%, 100%);
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Shortcut for transitions
/// @param {String} $transition - speed property easing
@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes: ("-webkit", "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }
  transition: $transition;
}

/// Filter Shortcuts
/// @param {Color} $var - filter property
/// @example scss - Filter Mixin
///   @include filter(blur(50px));
@mixin filter( $var ) {
  filter:$var;
}

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin breakpoint($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
